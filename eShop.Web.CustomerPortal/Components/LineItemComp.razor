
@inject IUpdateQuantityUseCase updateQuantityUseCase 
@inject IDeleteProductUseCase deleteProductUseCase

<div class="row card">
    <div class="col">
        <img src="@LineItem.Product.ImageLink" />
    </div>

    <div class="col">
        @*name, quantity, price*@
        <h5>@LineItem.Product.Name</h5>
        <label>Quantity: &nbsp;</label>
        <input type="number" min=0 value=@LineItem.Quantity @onchange="HandleUpdateQuantity" />
    </div>

    <div class="col">
        @*delete button*@
        <input type="button" value="Delete" @onclick="HandleDeleteProduct" class="btn btn-outline-danger">
    </div>
</div>



@code {
    [Parameter]
    public OrderLineItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteProduct { get; set; }


    public async Task HandleUpdateQuantity(ChangeEventArgs e)
    {
        int qty;

        if(int.TryParse(e.Value.ToString(), out qty))
        {           
            var order = await updateQuantityUseCase.ExecuteAsync(LineItem.ProductId, qty);

            await OnUpdateQuantity.InvokeAsync(order);
        }
    }

    public async Task HandleDeleteProduct()
    {
        var order = await deleteProductUseCase.ExecuteAsync(LineItem.ProductId);

        await OnDeleteProduct.InvokeAsync(order);
    }
}